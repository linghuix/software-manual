---
# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto

# BasedOnStyle:  Google

# 访问说明符(public、private等)的偏移
AccessModifierOffset: -1

# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align

AlignConsecutiveMacros: false

# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments: true
AlignConsecutiveBitFields: false

# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: true

# 左对齐逃脱换行(使用反斜杠换行)的反斜杠 换行时反斜杠位置：左对齐
AlignEscapedNewlines: Left

# 水平对齐二元和三元表达式的操作数
AlignOperands:   Align

# 对齐连续的尾随的注释
AlignTrailingComments: true

# 允许函数声明的所有参数在放在下一行
AllowAllArgumentsOnNextLine: true
AllowAllConstructorInitializersOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortEnumsOnASingleLine: true

# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: Never

# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false

# 允许短的函数放在同一行： None，InlineOnly(定义在类中),empty(空函数),Inline(定义在类中，空函数)，all
AllowShortFunctionsOnASingleLine: All
AllowShortLambdasOnASingleLine: All

# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: WithoutElse

# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: true

# 总是在返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None

# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None

# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: true

# 总是在template声明后换行
AlwaysBreakTemplateDeclarations: Yes

# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true

# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true

# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
#   在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BraceWrapping:
  AfterCaseLabel:  false
# class定义后面
  AfterClass:      false
# 控制语句后面
  AfterControlStatement: Never
  AfterEnum:       false
  AfterFunction:   true
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     true
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      true
  BeforeLambdaBody: false
  BeforeWhile:     true
# 缩进大括号
  IndentBraces:    false
# false 时，空方法体 {} 放在一行
  SplitEmptyFunction: true
# false 时，空记录（例如，类，结构或联合）{} 放在一行
  SplitEmptyRecord: true
# false 且 AfterNamespace == true 时 空命名空间体可放到一行: {}
  SplitEmptyNamespace: true
  
# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None

# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Custom

# 继承列表的逗号前换行
BreakBeforeInheritanceComma: false
BreakInheritanceList: BeforeColon
BreakBeforeTernaryOperators: true
BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: BeforeColon

# Java注解后换行 在Java文件中的字段上的每个注释之后中断。
BreakAfterJavaFieldAnnotations: false

# 允许打破当格式化字符串。
BreakStringLiterals: true

# Java注解后换行 每行字符的限制，0表示没有限制
ColumnLimit:     100

# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas:  '^ IWYU pragma:'

# 紧凑 命名空间
CompactNamespaces: false

# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4

# 延续的行的缩进宽度
ContinuationIndentWidth: 4

# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true

DeriveLineEnding: true

# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: true

# 关闭格式化
DisableFormat:   false

# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false

# 固定命名空间注释
FixNamespaceComments: true

# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IncludeBlocks:   Regroup
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
#   可以定义负数优先级从而保证某些#include永远在最前面
# include 分组排序方式 Preserve(按组排序) Merge（合并成一组排序）Regroup（按 IncludeCategories 重新分组排序
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
    SortPriority:    0
  - Regex:           '^<.*\.h>'
    Priority:        1
    SortPriority:    0
  - Regex:           '^<.*'
    Priority:        2
    SortPriority:    0
  - Regex:           '.*'
    Priority:        3
    SortPriority:    0
    
# 指定正则表达式file-to-main-include映射中允许的后缀。
IncludeIsMainRegex: '([-_](test|unittest))?$'

IncludeIsMainSourceRegex: ''

# 缩进case标签 case 是否缩进一级
IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: true

# 预处理代码缩进样式。None（不缩进）AfterHash（缩进）
IndentPPDirectives: None
IndentExternBlock: AfterExternBlock

# 缩进宽度
IndentWidth:     2

# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
InsertTrailingCommas: None

# JS 引号样式 Leave("",'') Single("") Double("")
JavaScriptQuotes: Leave
JavaScriptWrapImports: true

# 保留在块开始处的空行(OC 没用)
KeepEmptyLinesAtTheStartOfBlocks: false

# 开始一个块的宏的正则表达式
MacroBlockBegin: ''

# 结束一个块的宏的正则表达式
MacroBlockEnd:   ''

# 连续空行的最大数量
MaxEmptyLinesToKeep: 2

# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None

# OC 协议根据 ColumnLimit 长度换行 实现内部缩进宽度
ObjCBinPackProtocolList: Never

# 使用ObjC块时缩进宽度 使用 OC block 函数实现内部缩进宽度
ObjCBlockIndentWidth: 2
ObjCBreakBeforeNestedBlockParam: true

# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false

# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true

PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1

# 在一个注释中引入换行的penalty
PenaltyBreakComment: 3000

# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120

# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000

# 对于每个在行字符数限制之外的字符的penalty
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000

# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 200

# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Left

#RawStringFormats:
#  - Delimiter:       pb
#    Language:        TextProto
#    BasedOnStyle:    google
# 允许重新排版注释
RawStringFormats:
# 允许排序#include
  - Language:        Cpp
    Delimiters:
      - cc
      - CC
      - cpp
      - Cpp
      - CPP
      - 'c++'
      - 'C++'
    CanonicalDelimiter: ''
    BasedOnStyle:    google
  - Language:        TextProto
    Delimiters:
      - pb
      - PB
      - proto
      - PROTO
    EnclosingFunctions:
      - EqualsProto
      - EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO
      - ParseTextOrDie
      - ParseTextProtoOrDie
      - ParseTestProto
      - ParsePartialTestProto
    CanonicalDelimiter: ''
    BasedOnStyle:    google
ReflowComments:  true
SortIncludes:    true
SortUsingDeclarations: true

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false

# template 模板关键字后面添加空格
SpaceAfterTemplateKeyword: true

# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true

# 开圆括号之前添加一个空格: Never, ControlStatements, Always 初始化 c++ 11 对象的前面空格
# 初始化 c++ 11 对象的前面空格
SpaceBeforeCpp11BracedList: false

# 构造函数：前加空格
SpaceBeforeCtorInitializerColon: true

# 继承的：前面加空格
SpaceBeforeInheritanceColon: true

# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements

# false 清除 for 循环:前面的空格 for (auto v : values) {}
SpaceBeforeRangeBasedForLoopColon: true
SpaceInEmptyBlock: false

# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false

# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 2

# 在尖括号的<后和>前添加空格 < int >
SpacesInAngles:  false
SpacesInConditionalStatement: false

# 快捷数组 内部加空格 [ 1, 2, 3 ]; ：前加空格 f({a : 1, b : 2, c : 3});
SpacesInContainerLiterals: true

# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false

# 在圆括号的(后和)前添加空格
SpacesInParentheses: false

# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
SpaceBeforeSquareBrackets: false
BitFieldColonSpacing: Both

# 标准: Cpp03, Cpp11, Auto
Standard:        Auto
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
TabWidth:        8
UseCRLF:         false

# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab:          Never
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
...

